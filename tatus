[1mdiff --git a/src/layer3/ipv4.rs b/src/layer3/ipv4.rs[m
[1mindex bf406e9..1538e54 100644[m
[1m--- a/src/layer3/ipv4.rs[m
[1m+++ b/src/layer3/ipv4.rs[m
[36m@@ -1,7 +1,5 @@[m
 use std::collections::HashMap;[m
[31m-use std::ops::Range;[m
 [m
[31m-use anyhow::{bail, Context};[m
 use bit_field::BitField;[m
 use bytes::{Bytes, BytesMut};[m
 use num_traits::FromPrimitive;[m
[1mdiff --git a/src/layer4/udp.rs b/src/layer4/udp.rs[m
[1mindex 2cd4add..8ba3319 100644[m
[1m--- a/src/layer4/udp.rs[m
[1m+++ b/src/layer4/udp.rs[m
[36m@@ -1,7 +1,7 @@[m
 use std::collections::HashMap;[m
 [m
 use anyhow::{ensure, Context};[m
[31m-use bytes::{Bytes, BytesMut};[m
[32m+[m[32muse bytes::Bytes;[m
 use once_cell::sync::Lazy;[m
 use tokio::sync::mpsc::{self, Receiver, Sender};[m
 use tokio::sync::Mutex;[m
[36m@@ -23,9 +23,9 @@[m [mpub struct UdpSocket {[m
 }[m
 [m
 impl UdpPacket {[m
[31m-    pub fn new() -> Self {[m
[31m-        Default::default()[m
[31m-    }[m
[32m+[m[32m    // pub fn new() -> Self {[m
[32m+[m[32m    //     Default::default()[m
[32m+[m[32m    // }[m
 [m
     pub fn from_bytes(bytes: &Bytes) -> Self {[m
         Self {[m
[36m@@ -44,7 +44,7 @@[m [mpub static LISTEN_ADDRESSES: Lazy<Mutex<HashMap<u16, Sender<([u8; 4], Bytes)>>>>[m
     Lazy::new(Default::default);[m
 [m
 impl UdpSocket {[m
[31m-    pub async fn bind(ip: [u8; 4], port: u16) -> anyhow::Result<Self> {[m
[32m+[m[32m    pub async fn bind(_ip: [u8; 4], port: u16) -> anyhow::Result<Self> {[m
         let mut portlist = LISTEN_ADDRESSES.lock().await;[m
         ensure!(portlist.get(&port).is_none(), "Address already in use.");[m
 [m
[1mdiff --git a/src/udp_netcat.rs b/src/udp_netcat.rs[m
[1mindex b543ddd..f1a655e 100644[m
[1m--- a/src/udp_netcat.rs[m
[1m+++ b/src/udp_netcat.rs[m
[36m@@ -1,11 +1,4 @@[m
[31m-use std::{net::Ipv4Addr, str::FromStr};[m
[31m-[m
 use anyhow::Result;[m
[31m-use rand::Rng;[m
[31m-use tokio::{[m
[31m-    task::JoinHandle,[m
[31m-    time::{sleep, timeout, Duration},[m
[31m-};[m
 [m
 pub async fn main() -> Result<()> {[m
     let mut socket = crate::layer4::udp::UdpSocket::bind([127, 0, 0, 1], 1234).await?;[m
[36m@@ -14,5 +7,4 @@[m [mpub async fn main() -> Result<()> {[m
         let message = std::str::from_utf8(&bytes)?;[m
         println!("[UDP Data from {source_ip:?}] {}", message);[m
     }[m
[31m-    Ok(())[m
 }[m
